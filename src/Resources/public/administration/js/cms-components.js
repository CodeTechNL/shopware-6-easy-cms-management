(function(){var e={747:function(){},781:function(){},359:function(){},820:function(){},905:function(){},794:function(){},398:function(){},974:function(){},404:function(){},1:function(){},640:function(){},865:function(){let{Mixin:e}=Shopware;e.register("ct-cms-form-element-base",{props:{defaultStyling:{},property:{},propertyName:{},device:{},allowInheritance:{type:Boolean}},computed:{getPropertyLabel(){return this.$tc("ct-cms.css-properties."+this.propertyName+".label")},getPropertyHelpText(){return this.$tc("ct-cms.css-properties."+this.propertyName+".helpText")}},watch:{property(){this.currentProperty=this.property},currentProperty(e){this.$emit("update:property",e)}},data(){return{currentProperty:this.property,isInherited:!this.property}},methods:{updateProperty(e){this.$emit("update:property",e)}}})},350:function(){let{Mixin:e}=Shopware;e.register("ct-cms-styler-mixin",{})},266:function(e,t,n){var i=n(747);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("bb10d044",i,!0,{})},632:function(e,t,n){var i=n(781);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("4de21388",i,!0,{})},526:function(e,t,n){var i=n(359);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("5f1df490",i,!0,{})},452:function(e,t,n){var i=n(820);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("519c96c4",i,!0,{})},162:function(e,t,n){var i=n(905);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("3b115d37",i,!0,{})},556:function(e,t,n){var i=n(794);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("5d470788",i,!0,{})},637:function(e,t,n){var i=n(398);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("0b3f34d4",i,!0,{})},608:function(e,t,n){var i=n(974);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("5082ecde",i,!0,{})},527:function(e,t,n){var i=n(404);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("9a29c054",i,!0,{})},922:function(e,t,n){var i=n(1);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("f007e2a0",i,!0,{})},677:function(e,t,n){var i=n(640);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),n(346).Z("3abdf0f6",i,!0,{})},346:function(e,t,n){"use strict";function i(e,t){for(var n=[],i={},l=0;l<t.length;l++){var s=t[l],r=s[0],o={id:e+":"+l,css:s[1],media:s[2],sourceMap:s[3]};i[r]?i[r].parts.push(o):n.push(i[r]={id:r,parts:[o]})}return n}n.d(t,{Z:function(){return v}});var l="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!l)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=l&&(document.head||document.getElementsByTagName("head")[0]),o=null,c=0,a=!1,d=function(){},p=null,m="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e,t,n,l){a=n,p=l||{};var r=i(e,t);return h(r),function(t){for(var n=[],l=0;l<r.length;l++){var o=s[r[l].id];o.refs--,n.push(o)}t?h(r=i(e,t)):r=[];for(var l=0;l<n.length;l++){var o=n[l];if(0===o.refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete s[o.id]}}}}function h(e){for(var t=0;t<e.length;t++){var n=e[t],i=s[n.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](n.parts[l]);for(;l<n.parts.length;l++)i.parts.push(y(n.parts[l]));i.parts.length>n.parts.length&&(i.parts.length=n.parts.length)}else{for(var r=[],l=0;l<n.parts.length;l++)r.push(y(n.parts[l]));s[n.id]={id:n.id,refs:1,parts:r}}}}function g(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function y(e){var t,n,i=document.querySelector("style["+m+'~="'+e.id+'"]');if(i){if(a)return d;i.parentNode.removeChild(i)}if(u){var l=c++;t=w.bind(null,i=o||(o=g()),l,!1),n=w.bind(null,i,l,!0)}else t=b.bind(null,i=g()),n=function(){i.parentNode.removeChild(i)};return t(e),function(i){i?(i.css!==e.css||i.media!==e.media||i.sourceMap!==e.sourceMap)&&t(e=i):n()}}var f=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function w(e,t,n,i){var l=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=f(t,l);else{var s=document.createTextNode(l),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function b(e,t){var n=t.css,i=t.media,l=t.sourceMap;if(i&&e.setAttribute("media",i),p.ssrId&&e.setAttribute(m,t.id),l&&(n+="\n/*# sourceURL="+l.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(i){var l=t[i];if(void 0!==l)return l.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,n),s.exports}n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.p="bundles/cmscomponents/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/cmscomponents/"),function(){"use strict";var e={};n.r(e);var t={};n.r(t),n(677),n(526);let{Component:i}=Shopware;i.register("ct-style-components-form-components-ct-metric",{template:'<div class="ct-style-components-form-components-ct-metric-container">\n    <sw-container columns="1fr 1fr" gap="3px">\n        <div class="ct-style-components-form-components-ct-metric-container-item">\n            <sw-number-field :copyable="false" :copyableTooltip="false" v-model:value="value.value" @inputChange="updateInput($event,\'value\')" max="200">\n                <template v-slot:label>\n                    <span v-text="position"></span>\n                </template>\n            </sw-number-field>\n        </div>\n\n        <div class="ct-style-components-form-components-ct-metric-container-item">\n            <sw-select-field placeholder="Select metric" label="Type" v-model:value="value.type">\n                <option :value="availableType" v-for="availableType in availableTypes" v-text="availableType"></option>\n            </sw-select-field>\n        </div>\n    </sw-container>\n</div>\n',props:{position:{type:String,required:!0},value:{type:Object,required:!0},availableTypes:{type:Array,required:!0}},methods:{updateInput(e,t){this.$emit("update:value",{value:e,type:this.value.type})}}});let{Component:l}=Shopware;l.register("ct-style-components-form-components-ct-four-positions",{template:'<sw-container :columns="allEqual ? \'1fr 1fr\' : \'1fr 1fr\'" gap="10px">\n        <div>\n            <div v-text="type"></div>\n            <sw-switch-field v-model:value="allEqual" :label="$tc(\'ct-cms.general.keeo-all-sides-equal\')"></sw-switch-field>\n        </div>\n\n    <template v-if="!allEqual">\n        <div>\n            <template v-for="position in getPositionKeys()" :key="position">\n                <ct-style-components-form-components-ct-metric :position="position" v-model:value="positions[position]" :availableTypes="availableTypes"/>\n            </template>\n        </div>\n    </template>\n    <template v-else>\n        <div>\n\n            <sw-container columns="1fr 1fr" gap="10px">\n                <div>\n                    <sw-number-field :copyable="false" :copyableTooltip="false" v-model:value="all.value"\n                                     @inputChange="updateAllPositions($event)">\n                    </sw-number-field>\n                </div>\n\n                <div>\n                    <sw-select-field placeholder="Select metric" v-model:value="all.type">\n                        <option :value="availableType" v-for="availableType in availableTypes" v-text="availableType"></option>\n                    </sw-select-field>\n                </div>\n            </sw-container>\n        </div>\n    </template>\n</sw-container>',props:{positions:{type:Object,required:!0},equal:{type:Boolean,required:!0},type:{type:String,required:!0},availableTypes:{type:Array,default(){return["px","rem","em"]}}},watch:{allEqual(e){if(this.$emit("update:equal",e),e){this.initAll();let e={},t=this.getFirstPositionElement();this.getPositionKeys().forEach(function(n){e[n]=t.value}),this.$emit("update:positions",e)}},all:{handler(e){if(this.allEqual){let t={};this.getPositionKeys().forEach(function(n){t[n]=e}),this.$emit("update:positions",t)}},deep:!0}},data(){return{allEqual:!1,all:{value:0,type:""}}},methods:{getFirstPositionElement(){let e=this.getPositionKeys(),t=this.positions[e[0]];return{position:e[0],value:t}},getPositionKeys(){return Object.keys(this.positions)},updateAllPositions(e){this.all.value=e},initAll(){this.all=JSON.parse(JSON.stringify(this.getFirstPositionElement().value))}},created(){this.allEqual=this.equal,this.initAll()}});let{Component:s}=Shopware;s.register("ct-cms-styler",{template:'<h1 class="ct-cms-styling-divider">Font decoration</h1>\n<sw-container columns="1fr 1fr" gap="10px">\n    <div>\n        <sw-colorpicker\n                colorOutput="auto"\n                :alpha="true"\n                :disabled="false"\n                :colorLabels="true"\n                zIndex="1200"\n                v-model:value="settings.font_color"\n        >\n            <template v-slot:label>Color</template>\n\n        </sw-colorpicker>\n\n        <sw-text-field :copyable="false" :copyableTooltip="false" v-model:value="settings.font_size">\n            <template v-slot:label>Size</template>\n        </sw-text-field>\n\n\n        <sw-select-field placeholder="placeholder goes here..." label="Text align" v-model="settings.text_align">\n            <option value="left">Left</option>\n            <option value="center">Center</option>\n            <option value="right">Right</option>\n        </sw-select-field>\n\n        <sw-colorpicker\n                colorOutput="auto"\n                :alpha="true"\n                :disabled="false"\n                :colorLabels="true"\n                zIndex="1200"\n                v-model:value="settings.background_color"\n        >\n            <template v-slot:label>Background Color</template>\n        </sw-colorpicker>\n    </div>\n\n    <div>\n        <sw-select-field placeholder="placeholder goes here..." label="Font weight"\n                         v-model:value="settings.font_weight">\n            <option :value="weight * 100" v-for="weight in 10" v-text="weight * 100"></option>\n        </sw-select-field>\n\n        <sw-text-field :copyable="false" :copyableTooltip="false" v-model:value="settings.font_family">\n            <template v-slot:label>Font family</template>\n        </sw-text-field>\n\n        <sw-select-field placeholder="Select text decoration" label="Text decoration"\n                         v-model:value="settings.font_decoration">\n            <option value="">None</option>\n            <option value="dashed">Dashed</option>\n            <option value="dotted">Dotted</option>\n            <option value="line-through">Line Through</option>\n            <option value="underline">Underline</option>\n        </sw-select-field>\n\n    </div>\n</sw-container>\n\n\n<h1 class="ct-cms-styling-divider">Font decoration</h1>\n<sw-container columns="1fr">\n    <div>\n        <ct-style-components-form-components-ct-four-positions\n                v-model:positions="settings.margin.positions"\n                v-model:equal="settings.margin.equal"\n                type="margin"\n        ></ct-style-components-form-components-ct-four-positions>\n\n        <ct-style-components-form-components-ct-four-positions\n                v-model:positions="settings.padding.positions"\n                v-model:equal="settings.padding.equal"\n                type="padding"\n        ></ct-style-components-form-components-ct-four-positions>\n\n    </div>\n</sw-container>\n\n\n<h1 class="ct-cms-styling-divider">Other</h1>\n<sw-container columns="1fr">\n    <div>\n        <ct-style-components-form-components-ct-four-positions\n                v-model:positions="settings.border_radius.positions"\n                v-model:equal="settings.border_radius.equal"\n                type="border_radius"\n                :availableTypes="[\'px\']"\n        ></ct-style-components-form-components-ct-four-positions>\n\n        <div style="display: grid; grid-template: auto / repeat(4, 1fr); gap: 10px;">\n            <div>\n                Border\n            </div>\n            <div>\n                <div style="display: grid; grid-template: auto / repeat(2, 1fr); gap: 10px;">\n                    <div>\n                        <sw-text-field v-model:value="settings.border.width.value" :copyable="false" :copyableTooltip="false"></sw-text-field>\n                    </div>\n                    <div>\n                        <sw-select-field placeholder="Select text decoration"\n                                         v-model:value="settings.border.width.type">\n                            <option value="px">px</option>\n                            <option value="rem">rem</option>\n                        </sw-select-field>\n                    </div>\n                </div>\n\n            </div>\n            <div>\n                <sw-select-field placeholder="Select border style" v-model:value="settings.border.style">\n                    <option value="solid">Solid</option>\n                    <option value="dashed">Dashed</option>\n                </sw-select-field>\n\n            </div>\n            <div>\n                <sw-colorpicker\n                        v-model:value="settings.border.color"\n                        colorOutput="auto"\n                        :alpha="true"\n                        :disabled="false"\n                        :colorLabels="true"\n                        zIndex="1500">\n                </sw-colorpicker>\n            </div>\n        </div>\n    </div>\n</sw-container>\n\n<h1 class="ct-cms-styling-divider">Advanced</h1>\n<sw-container columns="2fr">\n    <div>\n        <sw-text-field :copyable="false" :copyableTooltip="false" v-model:value="settings.css_class">\n            <template v-slot:label>CSS Class</template>\n        </sw-text-field>\n    </div>\n    <div>\n        <sw-text-field :copyable="false" :copyableTooltip="false" v-model:value="settings.css_id">\n            <template v-slot:label>CSS ID</template>\n        </sw-text-field>\n    </div>\n</sw-container>\n',components:[e.default,t.default],props:{value:{}},data(){return{settings:this.value}},watch:{settings:{handler(e){this.$emit("update:value",e)},deep:!0}},methods:{mergeConfig(){let e={};Object.keys(this.settings).forEach(t=>{void 0!==this.value[t]?e[t]=this.value[t]:e[t]=this.settings[t]}),this.settings=e}}}),n(350),n(865);let r=e=>JSON.parse(JSON.stringify(e)),o=e=>e.charAt(0).toUpperCase()+e.slice(1);var c=new class{displayStyle={};deviceStyle={};formatters={padding:"MultiplePositions",margin:"MultiplePositions",borderRadius:"MultiplePositions"};except=["gridStyle","columns"];aliasses={fontColor:"color"};constructor(e){this.mainStyle=e||{}}setDeviceStyle(e){this.deviceStyle=e}hasInheritedStyle(e){return!!this.deviceStyle[e]}getStyle(e){return this.hasInheritedStyle(e)?this.deviceStyle[e]:this.mainStyle[e]}gridStyleClass(){return this.deviceStyle.gridStyle?"ct-cms-preview-grid-"+this.deviceStyle.gridStyle.replace(/\//g,"-"):this.mainStyle.gridStyle?"ct-cms-preview-grid-"+this.mainStyle.gridStyle.replace(/\//g,"-"):void 0}setStyle(e,t){e=this.aliasses[e]??e,this.displayStyle[e]=t}formatMultiplePositions(e,t){if(t.equal.keep){this.setStyle(e,t.equal.value+t.equal.type);return}if(t.positions){let n=[];Object.keys(t.positions).forEach(e=>{o(e),n.push(t.positions[e].value+t.positions[e].type)}),this.setStyle(e,n.join(" "))}}formatBackgroundColor(e,t){return this.setStyle(e,t)}formatDefault(e,t){this.setStyle(e,t)}getFormatter(e){return"format"+this.formatters[e]}render(){return Object.keys(this.mainStyle).forEach(e=>{if(this.except.includes(e))return;let t=this.getStyle(e),n=this.getFormatter(e);this[n]instanceof Function?this[n](e,t):this.formatDefault(e,t)}),this}getDisplayStyle(){return r(this.displayStyle)}setMainStyle(e){this.mainStyle=e}};let{Mixin:a}=Shopware;a.register("ct-cms-component-preview",{mixins:[a.getByName("cms-state")],props:{block:{}},data(){return{classes:{},styles:{},ctCmsElements:{}}},computed:{getStylingProperties(){throw Error("Computed property [getStylingProperties] has to be implemented and should be a array!")},getConfigWatcherKey(){throw Error("Computed property [getConfigWatcherKey] has to be implemented and should be a string! Use * to have it replaced with the property!")}},methods:{initConfigWatcher(e){let t=this.getConfigWatcherKey.replace("*",e);return this.$watch(t,{handler(t){this.setCmsElements(e,t)},deep:!0}),this},initCmsElementWatcher(e,t){return this.$watch("ctCmsElements."+e+".deviceStyling",{handler(n){this.displayStyling(e,n,t)},deep:!0}),this},setCmsElements(e,t){this.ctCmsElements[e]||(this.ctCmsElements[e]={}),this.ctCmsElements[e].deviceStyling=t},getElementData(){throw Error("The method [getElementData] needs to be implemented! It accepts one argument and should return a object")},initStyle(e){return this.$set(this.ctCmsElements,e,this.getElementData(e)),this},initDeviceWatcher(){this.$watch("currentDeviceView",e=>{this.getStylingProperties.forEach(t=>{this.displayStyling(t,this.ctCmsElements[t].deviceStyling,e)})})},displayStyling(e,t,n){return c.setMainStyle(t.desktop),c.setDeviceStyle({}),"desktop"!==n&&c.setDeviceStyle(t[n]),c.render(),this.classes[e]=c.gridStyleClass(),this.styles[e]=c.getDisplayStyle(),this},init(){this.getStylingProperties.forEach(e=>{this.initConfigWatcher(e).initCmsElementWatcher(e,this.currentDeviceView).initStyle(e).displayStyling(e,this.ctCmsElements[e].deviceStyling,this.currentDeviceView)}),this.initDeviceWatcher()}},mounted(){this.init()}});var d=class{types={"ct-grids-columns-2":["25/75","50/50","75/25","100"],"ct-grids-columns-3":["25/50/25","25/25/50","50/25/25","100"],"ct-grids-columns-4":["25/25/25/25","20/30/30/20","20/30/20/30","30/20/30/20","100"]};constructor(e){this.blockName=e}getGridChoices(){return this.types[this.blockName]}hasGridChoices(){return void 0!==this.types[this.blockName]}};let{Mixin:p}=Shopware;p.register("ct-cms-grid-preview",{computed:{examples(){return new d(this.getComponentName).getGridChoices()},getComponentName(){return this.$options.name.replace("sw-cms-block-preview-","")}}});let m=["desktop","tablet-landscape","mobile"],u=()=>m,{Mixin:v}=Shopware;v.register("ct-cms-settings-styling",{mixins:[v.getByName("cms-state")],computed:{getStyle(){return this.element.config[this.configProperty].value.deviceStyling},availableDevices(){return u()},mainDevice(){return"desktop"===this.currentDeviceView},getStyling(){if(!this.mainDevice)return this.getStyle.desktop},getCurrentDeviceStyling(){return this.getStyle[this.currentDeviceView]}},data(){return{configProperty:null}},methods:{setDevice(e){this.cmsPageState.currentCmsDeviceView=e},setConfigProperty(e){this.configProperty=e}}}),Shopware.Component.override("sw-cms-sidebar",{template:'{% block sw_cms_sidebar_block_layout_settings_content %}\n\n    {% parent %}\n\n    <sw-sidebar-collapse :expand-on-loading="true" v-if="showBlockStyling">\n        \n        {% block sw_cms_sidebar_block_layout_settings_header %}\n            <template #header>\n                <span> {{ $tc(\'sw-cms.sidebar.grid-style.label\') }}</span>\n            </template>\n        {% endblock %}\n\n        \n        {% block sw_cms_sidebar_block_layout_settings_form %}\n            <template #content>\n                <sw-container>\n                    <div>\n                        <ct-cms-block-config :block="selectedBlock"></ct-cms-block-config>\n                    </div>\n                </sw-container>\n            </template>\n        {% endblock %}\n    </sw-sidebar-collapse>\n{% endblock %}',computed:{showBlockStyling(){return this.selectedBlock.type.startsWith("ct-grids-columns-")}}}),n(452);let{Component:h,Mixin:g}=Shopware;h.register("ct-cms-block-config",{template:'<div class="ct-cms-block-config" style="padding: 0 25px;">\n    <template v-for="device in getAvailableDevices">\n        <ct-styling-form\n                :allowInheritance="!mainDevice"\n                v-if="device === currentDeviceView"\n                :device="currentDeviceView"\n                :availableGridSizes="getAvailableGridSizes"\n                :properties="getCurrentDeviceStyling"\n                :syncProperties="getCurrentLockedProperties"\n                :defaultStyling="getDefaultStyling"\n        ></ct-styling-form>\n    </template>\n\n</div>\n',mixins:[g.getByName("cms-state")],props:{block:{type:Object,required:!0}},computed:{mainDevice(){return"desktop"===this.currentDeviceView},getDefaultStyling(){return this.getDeviceStyling.desktop},getDeviceStyling(){return this.block.customFields.ct_cms_elements.deviceStyling},getCurrentDeviceStyling(){return this.getDeviceStyling[this.currentDeviceView]},getAvailableGridSizes(){return new d(this.block.type).getGridChoices()},getAvailableDevices(){return u()}}});let y=()=>({margin:{equal:{keep:!0,value:"0",type:"px"},positions:null},padding:{equal:{keep:!0,value:"0",type:"px"},positions:null},borderRadius:{equal:{keep:!0,value:"0",type:"px"},positions:null},gridStyle:"100",color:null,fontSize:null,textAlign:"center",backgroundColor:null,fontWeight:600,fontFamily:"",fontDecoration:"none",columns:2,border:{width:{value:0,type:"px"},style:"solid",color:"#000000"},gap:{equal:{keep:!0,value:null,type:"px"},positions:null}}),f=()=>({margin:["left","right","top","bottom"],padding:["left","right","top","bottom"],borderRadius:["topLeft","topRight","bottomRight","bottomLeft"]}),w=e=>f()[e],b=e=>{let t=y(),n={};if(!e.length)throw Error("No properties are given");return e.forEach(e=>{n[e]=t[e]}),n},S=e=>{y();let t={};if(!e.length)throw Error("No properties are given");return e.forEach(e=>{t[e]=null}),t},x=(e,t,n)=>{let i={};return e.forEach(e=>{i[e]={value:t,type:n}}),i},{Component:_}=Shopware;_.register("ct-cms-directions-manager",{template:'<div class="ct-form-multiple-positions-primary">\n    <div>\n        <sw-switch-field v-model:value="currentProperty.equal.keep"\n                         :label="$t(\'ct-cms.general.keep-equal\')"></sw-switch-field>\n    </div>\n    <div class="cols-double" v-if="currentProperty.equal.keep">\n        <sw-text-field v-model:value="currentProperty.equal.value">\n            <template v-slot:label>{{ $tc(\'ct-cms.css-properties.\'+propertyName+\'.label\') }}</template>\n        </sw-text-field>\n\n        <sw-select-field\n                :label="$tc(\'ct-cms.general.metricType\')"\n                v-model:value="currentProperty.equal.type">\n            <option value="%">%</option>\n            <option value="px">px</option>\n        </sw-select-field>\n    </div>\n</div>\n\n<div class="ct-form-multiple-positions">\n    <div class="cols-double" v-for="(position,key) in currentProperty.positions" v-if="!currentProperty.equal.keep"\n         :key="key">\n        <sw-number-field\n                numberType="int"\n                :step="null"\n                :min="0"\n                :max="10000"\n                :digits="0"\n                :fillDigits="false"\n                :allowEmpty="false"\n                v-model:value="position.value"\n        >\n            <template v-slot:label>{{ $tc(\'ct-cms.positions.\'+key) }}</template>\n        </sw-number-field>\n\n        <sw-select-field :label="$tc(\'ct-cms.general.metricType\')" v-model:value="position.type">\n            <option v-for="metric in metrics" :value="metric" v-text="metric"></option>\n        </sw-select-field>\n\n    </div>\n</div>',inheritAttrs:!1,props:{property:{type:Object,required:!0},propertyName:{type:String,required:!0},directions:{default(){return w(this.propertyName)}},defaultProperty:{default(){return null}}},computed:{metrics(){return["px","%"]}},watch:{property(){this.currentProperty=this.property},currentProperty:{handler(e){},deep:!0}},data(){return{currentProperty:this.property}},methods:{currentPropertyUpdateWatcher(e){this.currentProperty.equal.keep?this.currentProperty.positions=null:this.currentProperty.positions||(this.currentProperty.positions=x(this.directions,10,"px"))},registerPropertyWatcher(){let e=this.$watch("currentProperty",{handler(t){e(),this.currentPropertyUpdateWatcher(t),this.$emit("update:property",this.currentProperty),this.registerPropertyWatcher()},deep:!0})}},mounted(){this.registerPropertyWatcher()}});let{Component:k}=Shopware;k.register("ct-styling-form",{template:'<ct-form-select\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.columns"\n        :options="[1,2,3,4,5,6,7,8,9,10]"\n        :defaultStyling="defaultStyling.columns"\n        propertyName="columns"\n        :device="device"></ct-form-select>\n\n<ct-form-directions\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.padding"\n        :defaultStyling="defaultStyling.padding"\n        propertyName="padding"\n        :device="device"></ct-form-directions>\n\n<ct-form-directions\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.margin"\n        :defaultStyling="defaultStyling.margin"\n        propertyName="margin"\n        :device="device"></ct-form-directions>\n\n<ct-form-directions\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.borderRadius"\n        :defaultStyling="defaultStyling.borderRadius"\n        propertyName="borderRadius"\n        :device="device"></ct-form-directions>\n\n<ct-form-input\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.fontSize"\n        :defaultStyling="defaultStyling.fontSize"\n        propertyName="fontSize"\n        :device="device"></ct-form-input>\n\n<ct-form-select\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.textAlign"\n        :options="[\'left\', \'center\', \'right\', \'justify\']"\n        :defaultStyling="defaultStyling.textAlign"\n        propertyName="textAlign"\n        :device="device"></ct-form-select>\n\n<ct-form-select\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.gridStyle"\n        :options="availableGridSizes"\n        :defaultStyling="defaultStyling.gridStyle"\n        propertyName="gridStyle"\n        :device="device"></ct-form-select>\n\n<ct-form-color\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.fontColor"\n        :defaultStyling="defaultStyling.fontColor"\n        propertyName="fontColor"\n        :device="device"></ct-form-color>\n\n<ct-form-color\n        :allow-inheritance="allowInheritance"\n        v-model:property="currentStyling.backgroundColor"\n        :defaultStyling="defaultStyling.backgroundColor"\n        propertyName="backgroundColor"\n        :device="device"></ct-form-color>\n\n',emits:["propertyUpdated"],props:{allowInheritance:{type:Boolean},availableGridSizes:{type:Array,required:!0},properties:{type:Object,required:!0},syncProperties:{type:Object,required:!1,default(){return{}}},device:{type:String,required:!1},defaultStyling:{type:Object,required:!1,default(){return{}}}},data(){return{currentStyling:{},lockedProperties:{}}},watch:{syncProperties(){this.lockedProperties=this.syncProperties},properties(){this.currentStyling=this.properties}},methods:{propertyChanged(e,t){this.$emit("propertyUpdated",t,r(e),this.device)},shouldShow(e){return!this.device||!this.lockedProperties[e]},inheritanceChanged(e,t){if(e){let e=r(this.defaultStyling[t]);this.currentStyling[t]=e,this.$emit("propertyUpdated",t,e,this.device)}}},created(){this.currentStyling=this.properties,this.lockedProperties=this.syncProperties}});let{Component:C,Mixin:P}=Shopware;C.register("ct-form-directions",{template:'<div>\n    <div class="block-header-title">\n        <h3 v-text="getPropertyLabel"></h3>\n        {#     This is the inheritance switch. It can only be displayed when there is a device selected #}\n        <sw-switch-field v-if="allowInheritance" v-model:value="isInherited" @update:value="inheritanceChanged"\n                         :label="$tc(\'ct-cms.general.inherited\')"></sw-switch-field>\n    </div>\n\n    <ct-cms-directions-manager\n            v-if="!isInherited"\n            :helpText="getPropertyHelpText"\n            @update:property="updateProperty"\n            :directions="getDefaultDirections"\n            :defaultProperty="defaultStyling"\n            :property="currentProperty"\n            :propertyName="propertyName">\n    </ct-cms-directions-manager>\n</div>',mixins:[P.getByName("ct-cms-form-element-base")],methods:{inheritanceChanged(e){if(!e){this.updateProperty(r(this.defaultStyling));return}this.updateProperty(null),this.$emit("update:property",null)}}});let{Component:E,Mixin:D}=Shopware;E.register("ct-form-input",{template:'<div>\n    <div class="block-header-title">\n        <h3 v-text="getPropertyLabel"></h3>\n        {#     This is the inheritance switch. It can only be displayed when there is a device selected #}\n        <sw-switch-field v-if="allowInheritance" v-model:value="isInherited" @update:value="inheritanceChanged"\n                         :label="$tc(\'ct-cms.general.inherited\')"></sw-switch-field>\n    </div>\n\n    <sw-text-field\n            :copyable="false"\n            v-if="!isInherited"\n            :copyableTooltip="false"\n            :helpText="getPropertyHelpText"\n            v-model:value="currentProperty"\n            @update:property="updateProperty"\n    ></sw-text-field>\n</div>',mixins:[D.getByName("ct-cms-form-element-base")],methods:{inheritanceChanged(e){if(!e){this.updateProperty(this.defaultStyling);return}this.updateProperty(null)},initInheritance(){if(!this.allowInheritance){this.isInherited=!1;return}this.isInherited=null===this.property,this.isInherited=null===this.property||void 0===this.property}},mounted(){this.initInheritance()}});let{Component:I,Mixin:N}=Shopware;I.register("ct-form-select",{template:'<div>\n    <div class="block-header-title">\n        <h3 v-text="getPropertyLabel"></h3>\n        {#     This is the inheritance switch. It can only be displayed when there is a device selected #}\n        <sw-switch-field v-if="allowInheritance" v-model:value="isInherited" @update:value="inheritanceChanged"\n                         :label="$tc(\'ct-cms.general.inherited\')"></sw-switch-field>\n    </div>\n\n    <sw-select-field\n            v-if="!isInherited"\n            :helpText="getPropertyHelpText"\n            :placeholder="$tc(\'ct-cms.general.grid-type\')" v-model:value="currentProperty"\n            @update:property="updateProperty">\n        <option v-for="option in options" :value="option" v-text="option"></option>\n    </sw-select-field>\n</div>',mixins:[N.getByName("ct-cms-form-element-base")],props:{options:{type:Array,default(){return[]}}},methods:{inheritanceChanged(e){if(!e){this.updateProperty(this.defaultStyling);return}this.updateProperty(null)},initInheritance(){if(!this.allowInheritance){this.isInherited=!1;return}this.isInherited=null===this.property||void 0===this.property}},mounted(){this.initInheritance()}});let{Component:T,Mixin:q}=Shopware;T.register("ct-form-color",{template:'<div>\n    <div class="block-header-title">\n        <h3 v-text="getPropertyLabel"></h3>\n        {#     This is the inheritance switch. It can only be displayed when there is a device selected #}\n        <sw-switch-field v-if="allowInheritance" v-model:value="isInherited" @update:value="inheritanceChanged"\n                         :label="$tc(\'ct-cms.general.inherited\')"></sw-switch-field>\n    </div>\n\n    <sw-colorpicker\n            v-if="!isInherited"\n            :helpText="getPropertyHelpText"\n            v-model:value="currentProperty"\n            @update:property="updateProperty"\n            zIndex="1000"\n    ></sw-colorpicker>\n</div>',mixins:[q.getByName("ct-cms-form-element-base")],methods:{inheritanceChanged(e){if(!e){this.updateProperty(this.defaultStyling);return}this.updateProperty(null)},initInheritance(){if(!this.allowInheritance){this.isInherited=!1;return}this.isInherited=null===this.property,this.isInherited=null===this.property||void 0===this.property}},mounted(){this.initInheritance()}}),n(632);let{Component:M}=Shopware;M.register("ct-accordion",{template:'<div class="accordion">\n    <slot></slot>\n</div>',props:{defaultIndex:{}},data(){return{openIndex:this.defaultIndex}},methods:{setOpenIndex(e){this.openIndex=e}},provide(){return{accordion:this}}}),n(266);let{Component:B}=Shopware;B.register("ct-accordion-item",{template:'<div class="accordion-item">\n    <div class="accordion-item-header" @click="toggle">\n        <h2>{{ title }}</h2>\n    </div>\n    <div class="accordion-item-content" v-if="isOpen">\n        <slot></slot>\n    </div>\n</div>',props:{title:{type:String,required:!0},index:{type:Number,required:!0}},inject:["accordion"],computed:{isOpen(){return this.accordion.openIndex===this.index}},methods:{toggle(){this.isOpen?this.accordion.setOpenIndex(null):this.accordion.setOpenIndex(this.index),console.log("Clicking!"),this.$emit("toggle")}}}),n(527);let{Mixin:$}=Shopware;Shopware.Component.register("sw-cms-el-config-ct-sw-element",{template:'{% block sw_cms_element_ct_sw_element_config %}\n    <div class="sw-cms-element-ct-sw-element-config">\n        {% block sw_cms_element_ct_sw_element_config_element_select %}\n            <sw-select-field placeholder="View mode" label="Select element" v-model:value="selectedElement" required>\n                <option :value="availableElement" v-for="availableElement in availableElements" v-text="availableElement"></option>\n            </sw-select-field>\n        {% endblock %}\n\n        {% block sw_cms_element_ct_sw_element_config_element_display_element %}\n            <div v-if="selectedElement">\n                <component :is="getElementComponentName" :element="getElement" />\n            </div>\n        {% endblock %}\n\n    </div>\n{% endblock %}\n\n\n',mixins:[$.getByName("cms-element")],computed:{availableElements(){return["text","image","image-slider","image-gallery","vimeo-video","youtube-video","html","form","product-box","product-slider","product-description-reviews","cross-selling"]},selectedElement:{get(){return this.element.config.selectedElement.value},set(e){this.element.config.selectedElement.value=e}},selectedElementValue:{get(){return JSON.parse(this.element.config.selectedElementValue.value)},set(e){return this.element.config.selectedElementValue.value=JSON.stringify(e)}},getElementComponentName(){return"sw-cms-el-config-"+this.selectedElement},getElement(){return Shopware.Service("cmsService").getCmsElementConfigByName("text")}},watch:{"getElement.config":{handler(e){this.selectedElementValue=e},deep:!0}},methods:{createdComponent(){this.initElementConfig("ct-sw-element"),this.initElementData("ct-sw-element")}},created(){this.createdComponent()}}),n(922),Shopware.Component.register("sw-cms-el-preview-ct-sw-element",{template:'{% block sw_cms_element_ct_sw_element_preview %}\n    <div class="sw-cms-element-ct-sw-element-preview">\n        <h3>Preview for: ct-sw-element</h3>\n    </div>\n{% endblock %}\n\n'}),n(608),Shopware.Component.register("sw-cms-el-ct-sw-element",{template:'{% block sw_cms_element_ct_sw_element %}\n\n    <div class="sw-cms-element-ct-sw-element-component">\n        <template v-if="selectedElement">\n            <component :is="getElementName" :element="getElement"></component>\n        </template>\n\n        <div v-else class="ct-sw-element-config-required">\n            <h3>This component requires extra configuration</h3>\n        </div>\n    </div>\n{% endblock %}\n',mixins:["cms-element"],computed:{selectedElement(){return this.element.config.selectedElement.value},selectedElementValue(){return this.element.config.selectedElementValue.value},getElementName(){return"sw-cms-el-"+this.selectedElement},getElement(){return Shopware.Service("cmsService").getCmsElementConfigByName(this.selectedElement)}},methods:{createdComponent(){this.initElementConfig("ct-sw-element"),this.initElementData("ct-sw-element")}},created(){this.createdComponent()}}),Shopware.Service("cmsService").registerCmsElement({name:"ct-sw-element",label:"ct.sw-cms.elements.sw-element.label",component:"sw-cms-el-ct-sw-element",configComponent:"sw-cms-el-config-ct-sw-element",previewComponent:"sw-cms-el-preview-ct-sw-element",defaultConfig:{selectedElement:{source:"static",value:null},selectedElementValue:{source:"static",value:null}}}),n(556);let{Mixin:A,Component:O}=Shopware,V=["h1","h2","h3","h4","h5","h6"];O.register("sw-cms-el-config-ct-headings",{template:'{% block sw_cms_element_ct_headings_config %}\n    <div class="sw-cms-element-ct-headings-config">\n\n        <sw-tabs :small="false" defaultItem="main">\n            <template #default="{ active }">\n                <sw-tabs-item name="main" :activeTab="active" title="Main">\n                    Main\n                </sw-tabs-item>\n\n                <sw-tabs-item v-for="device in availableDevices" :name="device" :activeTab="active" :title="device"\n                              v-text="device"\n                              @click="setDevice(device)"\n                ></sw-tabs-item>\n            </template>\n\n            <template #content="{ active }">\n                <sw-container v-if="active === \'main\'">\n                    <sw-select-field placeholder="Heading type" label="Heading type" v-model:value="size" required>\n                        <option :value="size" v-for="size in sizes" v-text="size"></option>\n                    </sw-select-field>\n\n                    <sw-text-field :copyable="false" :copyableTooltip="false" v-model:value="textValue">\n                        <template v-slot:label>Text</template>\n                    </sw-text-field>\n                </sw-container>\n\n                <template v-for="device in availableDevices">\n                    <sw-container v-if="active === device">\n                        <ct-styling-form\n                                :allowInheritance="!mainDevice"\n                                v-if="device === currentDeviceView"\n                                :device="currentDeviceView"\n                                :properties="getCurrentDeviceStyling"\n                                :syncProperties="getCurrentLockedProperties"\n                                :defaultStyling="getStyle.desktop"\n                        ></ct-styling-form>\n\n                    </sw-container>\n                </template>\n\n            </template>\n        </sw-tabs>\n\n    </div>\n{% endblock %}\n\n\n',mixins:[A.getByName("cms-element"),A.getByName("cms-state"),A.getByName("ct-cms-settings-styling")],computed:{sizes(){return V},size:{get(){return this.element.config.size.value},set(e){this.element.config.size.value=e}},textValue:{get(){return this.element.config.textValue.value},set(e){this.element.config.textValue.value=e}},availableDevices(){return u()},mainDevice(){return"desktop"===this.currentDeviceView},getStyling(){this.mainDevice||this.getStyle.desktop},getCurrentDeviceStyling(){return this.getStyle[this.currentDeviceView]}},watch:{"element.config":{handler(){this.$emit("element-update",this.element)},deep:!0}},methods:{selectDevice(e){this.cmsPageState.currentCmsDeviceView=e}},mounted(){this.initElementConfig("ct-headings"),this.initElementData("ct-headings"),this.setConfigProperty("ct_styler_title")}}),n(637),Shopware.Component.register("sw-cms-el-preview-ct-headings",{template:'{% block sw_cms_element_ct_headings_preview %}\n    <div class="sw-cms-element-ct-headings-preview">\n        <h3>Preview for: ct-headings</h3>\n    </div>\n{% endblock %}\n\n'}),n(162);let{Mixin:z}=Shopware;Shopware.Component.register("sw-cms-el-ct-headings",{template:'{% block sw_cms_element_ct_headings %}\n    <div class="sw-cms-element-ct-headings-component">\n        <component :is="size" :style="styles.ct_styler_title" v-text="textValue" :class="classes.ct_styler_title"></component>\n    </div>\n{% endblock %}\n',mixins:[z.getByName("cms-element"),z.getByName("cms-state"),z.getByName("ct-cms-component-preview")],computed:{getStylingProperties(){return["ct_styler_title"]},getConfigWatcherKey(){return"element.config.*.value.deviceStyling"},size(){return this.element.config.size.value},textValue(){return this.element.config.textValue.value}},methods:{getElementData(e){return this.element.config[e].value}},created(){this.initElementConfig("ct-headings"),this.initElementData("ct-headings")}});let j=["padding","margin","fontSize","gridStyle","borderRadius","cssId","cssClass","textAlign","fontColor","backgroundColor","columns"],F=()=>{let e={deviceStyling:{}};return u().forEach(t=>{"desktop"===t?e.deviceStyling[t]=b(j):e.deviceStyling[t]=S(j)}),r(e)};Shopware.Service("cmsService").registerCmsElement({name:"ct-headings",label:"ct.sw-cms.elements.headings.label",component:"sw-cms-el-ct-headings",configComponent:"sw-cms-el-config-ct-headings",previewComponent:"sw-cms-el-preview-ct-headings",defaultConfig:{size:{source:"static",value:"h3"},textValue:{source:"static",value:"Example text"},ct_styler_title:{source:"static",value:F()}}});let{Mixin:W}=Shopware;Shopware.Component.register("sw-cms-block-ct-grids-columns-2",{template:'{% block sw_cms_block_ct_grids_columns_2 %}\n    <div class="sw-cms-block-ct-grids-columns-2 ct-styler">\n        <div class="ct-grid-container" :class="classes.ct_cms_elements">\n            <div class="ct-grid-item" :style="styles.ct_cms_elements">\n                <slot name="col1"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styles.ct_cms_elements">\n                <slot name="col2"></slot>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n',mixins:[W.getByName("ct-cms-component-preview")],computed:{getStylingProperties(){return["ct_cms_elements"]},getConfigWatcherKey(){return"block.customFields.*.deviceStyling"}},methods:{getElementData(e){return this.block.customFields[e]}}});let{Mixin:L}=Shopware;Shopware.Component.register("sw-cms-block-preview-ct-grids-columns-2",{template:'{% block sw_cms_block_preview_ct_grids_columns_2 %}\n    <div class="sw-cms-block-preview-ct-grids-columns-2 ct-grid-previews">\n\n        <div v-for="example in examples" class="container-holder">\n            <div class="ct-grid-container" :class="\'ct-cms-preview-grid-\'+example.replace(\'/\', \'-\')">\n                <template v-for="grid in example.split(\'/\')">\n                    <div v-text="grid + \'%\'"></div>\n                </template>\n            </div>\n\n        </div>\n    </div>\n{% endblock %}',mixins:[L.getByName("ct-cms-grid-preview")]}),Shopware.Service("cmsService").registerCmsBlock({name:"ct-grids-columns-2",category:"ct-grid",label:"ct-grids.blocks.columns-2.preview.label",component:"sw-cms-block-ct-grids-columns-2",previewComponent:"sw-cms-block-preview-ct-grids-columns-2",defaultConfig:{customFields:{ct_cms_elements:F()}},slots:{col1:"ct-sw-element",col2:"ct-sw-element"}});let{Mixin:U}=Shopware;Shopware.Component.register("sw-cms-block-ct-grids-columns-3",{template:'{% block sw_cms_block_ct_grids_columns_3 %}\n    <div class="sw-cms-block-ct-grids-columns-3">\n        <div class="ct-grid-container" :class="cssClassAttribute">\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col1"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col2"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col3"></slot>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n',mixins:[U.getByName("ct-cms-component-preview")],computed:{getStylingProperties(){return["ct_cms_elements"]},getConfigWatcherKey(){return"block.customFields.*.deviceStyling"}},methods:{getElementData(e){return this.block.customFields[e]}}});let{Mixin:R}=Shopware;Shopware.Component.register("sw-cms-block-preview-ct-grids-columns-3",{template:'{% block sw_cms_block_preview_ct_grids_columns_3 %}\n    <div class="sw-cms-block-preview-ct-grids-columns-3 ct-grid-previews">\n\n        <div v-for="example in examples" class="container-holder">\n            <div class="ct-grid-container" :class="\'ct-cms-preview-grid-\'+example.replace(/\\//g, \'-\')">\n                <template v-for="grid in example.split(\'/\')">\n                    <div v-text="grid + \'%\'"></div>\n                </template>\n            </div>\n\n        </div>\n    </div>\n{% endblock %}',mixins:[R.getByName("ct-cms-grid-preview")]}),Shopware.Service("cmsService").registerCmsBlock({name:"ct-grids-columns-3",category:"ct-grid",label:"ct-grids.blocks.columns-3.preview.label",component:"sw-cms-block-ct-grids-columns-3",previewComponent:"sw-cms-block-preview-ct-grids-columns-3",defaultConfig:{customFields:{ct_cms_elements:F()}},slots:{col1:"text",col2:"text",col3:"text"}});let{Mixin:K}=Shopware;Shopware.Component.register("sw-cms-block-ct-grids-columns-4",{template:'{% block sw_cms_block_ct_grids_columns_4 %}\n    <div class="sw-cms-block-ct-grids-columns-4">\n        <div class="ct-grid-container" :class="cssClassAttribute">\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col1"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col2"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col3"></slot>\n            </div>\n            <div class="ct-grid-item" :style="styleAttribute">\n                <slot name="col4"></slot>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n',mixins:[K.getByName("ct-cms-component-preview")],computed:{getStylingProperties(){return["ct_cms_elements"]},getConfigWatcherKey(){return"block.customFields.*.deviceStyling"}},methods:{getElementData(e){return this.block.customFields[e]}}});let{Mixin:Z}=Shopware;Shopware.Component.register("sw-cms-block-preview-ct-grids-columns-4",{template:'{% block sw_cms_block_preview_ct_grids_columns_4 %}\n    <div class="sw-cms-block-preview-ct-grids-columns-4 ct-grid-previews">\n\n        <div v-for="example in examples" class="container-holder">\n            <div class="ct-grid-container" :class="\'ct-cms-preview-grid-\'+example.replace(/\\//g, \'-\')">\n                <template v-for="grid in example.split(\'/\')">\n                    <div v-text="grid + \'%\'"></div>\n                </template>\n            </div>\n\n        </div>\n    </div>\n{% endblock %}',mixins:[Z.getByName("ct-cms-grid-preview")]}),Shopware.Service("cmsService").registerCmsBlock({name:"ct-grids-columns-4",category:"ct-grid",label:"ct-grids.blocks.columns-4.preview.label",component:"sw-cms-block-ct-grids-columns-4",previewComponent:"sw-cms-block-preview-ct-grids-columns-4",defaultConfig:{customFields:{ct_cms_elements:F()}},slots:{col1:"text",col2:"text",col3:"text",col4:"text"}}),console.log("Env test"),console.log("production"),console.log("end ")}()})();